namespace http://www.w3.org/1999/xhtml
namespace xendr=http://xbrl.us/xendr/2.0/template
namespace ixt1=http://www.xbrl.org/inlineXBRL/transformation/2010-04-20
namespace ixt4=http://www.xbrl.org/inlineXBRL/transformation/2020-02-12
namespace ferc=http://ferc.gov/form/2023-04-01/ferc
namespace ferc-part=http://www.ferc.gov/form/parts

constant $period-lookup = dict(
							list('Q4',list('01-01', '12-31')),
							list('Q3',list('01-01', '09-30')),
							list('Q2',list('01-01', '06-30')),
							list('Q1',list('01-01', '03-31'))
   						 )

constant $current-start = $report-year + '-01-01'
constant $current-end = $report-year + '-' + $period-lookup[$report-period][2]
constant $prior-start =  (($report-year.int - 1)).plain-string + '-01-01'
constant $prior-end = (($report-year.int - 1)).plain-string + '-' + $period-lookup[$report-period][2]
constant $prior2-start = (($report-year.int - 2)).plain-string + '-01-01'
constant $prior2-end = (($report-year.int - 2)).plain-string + '-' + $period-lookup[$report-period][2]
constant $month-ends = if mod($report-year.int,4) == 0 
							if mod($report-year.int,100) != 0 
								list(31,29,31,30,31,30,31,31,30,31,30,31)
							else
								if  mod($report-year.int,400) == 0 
									list(31,29,31,30,31,30,31,31,30,31,30,31)
								else
									list(31,28,31,30,31,30,31,31,30,31,30,31)
						else
							list(31,28,31,30,31,30,31,31,30,31,30,31)

constant $report-year = max(list([covered @ferc:ReportYear]))

constant $currentInstant = if ($current-end == none) none 
					       else date($current-end)  /** REFERENCE Current. **/
constant $currentDuration = if ($current-start == none or $current-end == none) none 
						    else duration(date($current-start), date($current-end)) /** REFERENCE Current. **/
constant $priorInstant = if ($current-start == none) none 
						    else date($current-start) - time-span("P1D") /** REFERENCE = Prior. ie. 12/31**/
constant $prior12MonthsInstant = if ($prior-end == none) none 
								 else date($prior-end) /** REFERENCE =prior12MonthsInstant. **/
constant $priorDuration = if ($prior-start == none or $prior-end == none) none 
						  else duration(date($prior-start), date($prior-end)) /** REFERENCE = Prior. **/
constant $prior2Instant = if ($prior-start == none) none 
						  else date($prior-start) - time-span("P1D") /** REFERENCE = Prior2. ie. 12/31**/
constant $prior24MonthsInstant = if ($prior2-end == none) none 	
							     else date($prior2-end) /** REFERENCE prior24MonthsInstant. ie. 12/31**/
constant $prior2Duration = if ($prior2-start == none or $prior-end == none) none 
						   else duration(date($prior2-start), date($prior2-end)) /** REFERENCE prior2. ie. 12/31**/

constant $currentYear = if ($current-end == none) none else substring($current-end, 1 , 4)
constant $priorYear = if ($prior-end == none) none else substring($prior-end, 1, 4)
constant $monthEndList = if ($month-ends == none) none else $month-ends.split(',')
constant $currentMonth = if ($current-end == none) none else substring($current-end, 6, 7)


constant $current3M = if ($currentYear == none or $currentInstant == none) none
					  else duration(
							   date($currentYear+'-'+pad((month($currentInstant)-2).string, 2, '0')+'-01'),
					           $currentInstant
					  )

constant $prior3M = if ($priorYear == none or $prior12MonthsInstant == none) none
					else duration(
							   date($priorYear+'-'+pad((month($prior12MonthsInstant)-2).string, 2, '0')+'-01'),
					           $prior12MonthsInstant
					  )


constant $currentQ1Instant = if ($currentYear == none) none else date($currentYear+'-03-31')
constant $currentQ1Duration = if ($currentYear == none) none else duration(date($currentYear+'-01-01'), date($currentYear+'-03-31'))
constant $currentQ2Instant = if ($currentYear == none) none else date($currentYear+'-06-30')
constant $currentQ2Duration = if ($currentYear == none) none else duration(date($currentYear+'-04-01'), date($currentYear+'-06-30'))
constant $currentQ3Instant = if ($currentYear == none) none else date($currentYear+'-09-30')
constant $currentQ3Duration = if ($currentYear == none) none else duration(date($currentYear+'-07-01'), date($currentYear+'-09-30'))
constant $currentQ4Instant = if ($currentYear == none) none else date($currentYear+'-12-31')
constant $currentQ4Duration = if ($currentYear == none) none else duration(date($currentYear+'-10-01'), date($currentYear+'-12-31'))

constant $priorQ1Instant = if ($priorYear == none) none else date($priorYear+'-03-31')
constant $priorQ1Duration = if ($priorYear == none) none else duration(date($priorYear+'-01-01'), date($priorYear+'-03-31'))
constant $priorQ2Instant = if ($priorYear == none) none else date($priorYear+'-06-30')
constant $priorQ2Duration = if ($priorYear == none) none else duration(date($priorYear+'-04-01'), date($priorYear+'-06-30'))
constant $priorQ3Instant = if ($priorYear == none) none else date($priorYear+'-09-30')
constant $priorQ3Duration = if ($priorYear == none) none else duration(date($priorYear+'-07-01'), date($priorYear+'-09-30'))
constant $priorQ4Instant = if ($priorYear == none) none else date($priorYear+'-12-31')
constant $priorQ4Duration = if ($priorYear == none) none else duration(date($priorYear+'-10-01'), date($priorYear+'-12-31'))

constant $currentCumQ2 = if ($currentYear == none) none else duration(date($currentYear+'-01-01'), date($currentYear+'-06-30'))
constant $currentCumQ3 = if ($currentYear == none) none else duration(date($currentYear+'-01-01'), date($currentYear+'-09-30'))
constant $currentCumQ4 = if ($currentYear == none) none else duration(date($currentYear+'-01-01'), date($currentYear+'-12-31'))

constant $priorCumQ2 = if ($priorYear == none) none else duration(date($priorYear+'-01-01'), date($priorYear+'-06-30'))
constant $priorCumQ3 = if ($priorYear == none) none else duration(date($priorYear+'-01-01'), date($priorYear+'-09-30'))
constant $priorCumQ4 = if ($priorYear == none) none else duration(date($priorYear+'-01-01'), date($priorYear+'-12-31'))

constant $month1 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-01-01'), date($currentYear + '-01-' + $monthEndList[1]))
constant $month2 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-02-01'), date($currentYear + '-02-' + $monthEndList[2]))
constant $month3 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-03-01'), date($currentYear + '-03-' + $monthEndList[3]))
constant $month4 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-04-01'), date($currentYear + '-04-' + $monthEndList[4]))
constant $month5 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-05-01'), date($currentYear + '-05-' + $monthEndList[5]))
constant $month6 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-06-01'), date($currentYear + '-06-' + $monthEndList[6]))
constant $month7 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-07-01'), date($currentYear + '-07-' + $monthEndList[7]))
constant $month8 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-08-01'), date($currentYear + '-08-' + $monthEndList[8]))
constant $month9 = if ($currentYear == none or $monthEndList == none) none 
				   else duration(date($currentYear + '-09-01'), date($currentYear + '-09-' + $monthEndList[9]))
constant $month10 = if ($currentYear == none or $monthEndList == none) none 
				    else duration(date($currentYear + '-10-01'), date($currentYear + '-10-' + $monthEndList[10]))
constant $month11 = if ($currentYear == none or $monthEndList == none) none 
				    else duration(date($currentYear + '-11-01'), date($currentYear + '-11-' + $monthEndList[11]))
constant $month12 = if ($currentYear == none or $monthEndList == none) none 
				    else duration(date($currentYear + '-12-01'), date($currentYear + '-12-' + $monthEndList[12]))

constant $currentQM1 = if ($currentYear == none or $currentMonth == none) none 
					   else duration(date($currentYear + '-' + pad(($currentMonth.number - 2).string, 2, '0') + '-01'),
							         date($currentYear + '-' + pad(($currentMonth.number - 2).string, 2, '0') + '-' + $monthEndList[$currentMonth.number - 2]))

constant $currentQM2 = if ($currentYear == none or $currentMonth == none) none 
					   else duration(date($currentYear + '-' + pad(($currentMonth.number - 1).string, 2, '0') + '-01'),
							         date($currentYear + '-' + pad(($currentMonth.number - 1).string, 2, '0') + '-' + $monthEndList[$currentMonth.number - 1]))

constant $currentQM3 = if ($currentYear == none or $currentMonth == none) none 
					   else duration(date($currentYear + '-' + $currentMonth + '-01'),
							         date($current-end))

constant $current3MYDuration = if ($prior3MYInstant == none or $current-end == none) none 
							   else (duration(date($prior3MYInstant) + time-span("P1D"), date($current-end)))

constant $report-period = max(list([covered @ferc:ReportPeriod]))

constant $prior3MYInstant = if exists($report-period) 
								if $report-period == 'Q4'
										$priorInstant
								else 
									if $report-period == 'Q3'
										$currentQ2Instant
									else 
										if $report-period == 'Q2'
											$currentQ1Instant
										else
											if $report-period == 'Q1'
												$priorInstant
											else
												$priorInstant
							else 
								none

function pad($padee, $len, $pad_char)
	if length($padee) >= $len
		// There is nothing to pad
		$padee
	else
		$pad_char_1 = if $pad_char == none ' '
				      else if (length($pad_char.string) >= 1) substring($pad_char.string,1,1) 
				      else ' ';
		$padding = sum(list(for $x in range($len) $pad_char_1));
		$padded_num = $padding + $padee;

		substring($padded_num, length($padded_num)-$len+1)

function transpose($x)
	list(
		for $i in range(length($x[1]))
			list(
				for $inner in $x
					$inner[$i]
				)
	)
	
function member-default($dim, $mem)
	if taxonomy().dimension($dim).default().name == $mem
			none
	else
			$mem
constant $xendr-footnote-fact-ids = none
output rule-1
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 22
($rv-0 = taxonomy().concept(ferc:RespondentLegalName).label("http://ferc.gov/form/2020-01-01/roles/label/F1Header").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-2
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 27
($rv-0 = [@ferc:RespondentLegalName @period=$currentDuration];
dict(list('type', 'f'), list('value', first-value-or-none($rv-0).string), list('fact', [@ferc:RespondentLegalName @period=$currentDuration].xendr-object-id))).to-json

output rule-3
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 33
($rv-0 = taxonomy().concept(ferc:SubmissionType).label("http://ferc.gov/form/2020-01-01/roles/label/F1Header").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-4
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 39
($rv-0 = if missing({covered @concept=ferc:SubmissionType}) 
                                '<span class="checkbox">&#9744;</span> An Original' else if [@concept=ferc:SubmissionType @period=$currentDuration] == "O" 
                                '<span class="checkbox">&#9745;</span> An Original' else 
                                '<span class="checkbox">&#9744;</span> An Original';
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-5
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 51
($rv-0 = if missing([covered @concept=ferc:SubmissionType @period=$currentDuration]) 
                                '<span class="checkbox">&#9744;</span> A Resubmission' else if [@concept=ferc:SubmissionType @period=$currentDuration] == "R" 
                                '<span class="checkbox">&#9745;</span> A Resubmission' else 
                                '<span class="checkbox">&#9744;</span> A Resubmission';
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-6
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 62
($rv-0 = taxonomy().concept(ferc:ReportDate).label("http://ferc.gov/form/2020-01-01/roles/label/F1Header").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-7
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 67
($rv-0 = [@ferc:ReportDate @period=$currentDuration];
dict(list('type', 'f'), list('value', first-value-or-none($rv-0).string), list('fact', [@ferc:ReportDate @period=$currentDuration].xendr-object-id))).to-json

output rule-8
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 72
($rv-0 = taxonomy().concept(ferc:ReportYearPeriod).label("http://ferc.gov/form/2020-01-01/roles/label/F1Header").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-9
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 77
($rv-0 = [@ferc:ReportYear @period=$currentDuration];
dict(list('type', 'f'), list('value', first-value-or-none($rv-0).string), list('fact', [@ferc:ReportYear @period=$currentDuration].xendr-object-id))).to-json

output rule-10
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 82
($rv-0 = [@ferc:ReportPeriod @period=$currentDuration];
dict(list('type', 'f'), list('value', first-value-or-none($rv-0).string), list('fact', [@ferc:ReportPeriod @period=$currentDuration].xendr-object-id))).to-json

output rule-11
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 92
($rv-0 = taxonomy().concept(ferc:ScheduleStatementOfCashFlowsAbstract).label("http://ferc.gov/form/2020-01-01/roles/label/F1ScheduleTitle").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-12
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 103
($rv-0 = taxonomy().concept(ferc:ScheduleStatementOfCashFlowsAbstract).label("http://ferc.gov/form/2020-01-01/roles/label/F1Instructions").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-13
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 359
($rv-0 = first(list([@ferc:FormType @period=$currentDuration]));
dict(list('type', 'f'), list('value', first-value-or-none($rv-0).string), list('fact', first(list([@ferc:FormType @period=$currentDuration])).xendr-object-id))).to-json

output rule-14
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 366
($rv-0 = " (" + taxonomy().concept(ferc:ScheduleStatementOfCashFlowsAbstract).label("http://ferc.gov/form/2020-01-01/roles/label/F1DateRevised").text + ")";
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-15
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - line 376
($rv-0 = taxonomy().concept(ferc:ScheduleStatementOfCashFlowsAbstract).label("http://ferc.gov/form/2020-01-01/roles/label/F1PageRange").text;
dict(list('type', 's'), list('value', first-value-or-none($rv-0).string))).to-json

output rule-16
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 147
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 306
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 317
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 329
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 339
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 313

$treeElements = navigate parent-child descendants from ferc:CashFlowLineItems role "http://ferc.gov/form/2020-01-01/roles/Schedule/F1/ScheduleStatementOfCashFlows" returns list (target, preferred-label, result-order);
 
    $data-labels = list(for $row in $treeElements
            $concept = $row[1];
            $row_num = (filter $concept.references("http://ferc.gov/form/2020-01-01/roles/reference/formLocation") where ($item.part-by-name(ferc-part:Schedule).part-value == "120 - Schedule - Statement of Cash Flows" and $item.part-by-name(ferc-part:ValueType).part-value.string == "Label")).to-list;
            $conceptPeriod = $concept.period-type;
            $beginningBalance = if $row[2].role.uri == "http://ferc.gov/form/2020-01-01/roles/label/F1BeginningBalance"
                                    true
                                else
                                    false
            $beginningRow = if ($row_num.part-by-name(ferc-part:Row)).length > 0
                                    min(($row_num.part-by-name(ferc-part:Row)).part-value)
                            else 
                                    ""
            $endingRow = if ($row_num.part-by-name(ferc-part:Row)).length > 0
                                    max(($row_num.part-by-name(ferc-part:Row)).part-value)
                            else 
                                    ""
                                
            $current = if $conceptPeriod == "duration"
                            if exists(first(list([covered @concept = $row[1] @period = $currentDuration])))
					            first(list([covered @concept = $row[1] @period = $currentDuration]))
					        else
                                none
                        else
                            if $beginningBalance
                                if exists(first(list([covered @concept = $row[1] @period = $priorInstant])))
                                    first(list([covered @concept = $row[1] @period = $priorInstant]))
                                else
                                    none
                            else
                                if exists(first(list([covered @concept = $row[1] @period = $currentInstant])))
                                    first(list([covered @concept = $row[1] @period = $currentInstant]))
                                else
                                    none

            $prior =  if $conceptPeriod == "duration"
                            if exists(first(list([covered @concept = $row[1] @period = $priorDuration])))
                                    first(list([covered @concept = $row[1] @period = $priorDuration]))
                            else
                                    none
                        else
                            if $beginningBalance
                                if exists(first(list([covered @concept = $row[1] @period = $prior2Instant])))
                                    first(list([covered @concept = $row[1] @period = $prior2Instant]))
                                else
                                    none
                            else
                                if exists(first(list([covered @concept = $row[1] @period = $prior12MonthsInstant])))
                                    first(list([covered @concept = $row[1] @period = $prior12MonthsInstant]))
                                else
                                    none
    

            $sequenceReferences = (filter $concept.references("http://ferc.gov/form/2020-01-01/roles/reference/elementSequence") where ($item.part-by-name(ferc-part:ScheduleRole).part-value == "http://ferc.gov/form/2020-01-01/roles/Schedule/F1/ScheduleStatementOfCashFlows") returns  $item.part-by-name(ferc-part:SequenceRole).part-value).to-list;
			
			
          
			/*** $breakdown = list($sequenceReferences.to-list);***/
            $breakdown = list(
                        if $sequenceReferences.to-list.length > 0
								
                            $sequenceRole = $sequenceReferences[1];

                            $sequenceElements = navigate parent-child descendants role $sequenceRole returns list(target, preferred-label, result-order);

                            $axis = first(list(for $a in $sequenceElements
                                        if $a.length > 0
                                            $conceptRoll = $a[1];
                                            if $conceptRoll.substitution.local-name == "dimensionItem"
                                                $conceptRoll
                                            else  
                                                skip
                                        else
                                            skip)); 
                                
                            $lineItemsList = list(for $l in $sequenceElements
                                                    if $l.length > 0
                                                        $conceptRoll = $l[1];
                                                        if $conceptRoll.is-abstract
                                                            skip
                                                        else  
                                                            $l 
                                                    else
                                                        skip
                                                            );
                               
                            $data1 = 
                                    
                                            list({covered {list(
                                                if exists({@ferc:OrderNumber @unit=* @period = $currentDuration where $fact.dimension($axis) != none})
                                                    {@ferc:OrderNumber @unit=* @period = $currentDuration where $fact.dimension($axis) != none}
                                                else
                                                    0,
                                                if ($row_num.part-by-name(ferc-part:Row)).length > 0
                                                    ($row_num.part-by-name(ferc-part:Row))[1].part-value
                                                else 
                                                    "",
                                                $lineItemsList[3][1],
                                                    
                                                if exists({@concept = $lineItemsList[3][1] @unit @period = $currentDuration where $fact.dimension($axis) != none}) 
                                                    {@concept = $lineItemsList[3][1] @unit @period = $currentDuration where $fact.dimension($axis) != none} 
                                                else 
                                                    none,
                                                if exists({@concept = $lineItemsList[2][1] @unit @period = $currentDuration where $fact.dimension($axis) != none} ) 
                                                    {@concept = $lineItemsList[2][1] @unit @period = $currentDuration where $fact.dimension($axis) != none} 
                                                else 
                                                    none,
                                                if exists({@concept = $lineItemsList[2][1] @unit=* @period = $priorDuration where $fact.dimension($axis) != none}) 
                                                    {@concept = $lineItemsList[2][1] @unit=* @period = $priorDuration where $fact.dimension($axis) != none}     
                                                else 
                                                    none
                                                )}});

                            $data2 = list(for $x in $data1 
                                        if $x == list(0,$x[2],$x[3],none,none,none)
                                            skip
                                        else
                                            $x);
								
                            $orders = set(for $x in $data2 $x[1]).sort;
                            
                            $orderedData = list(for $order in $orders
                                                for $row in $data2  
                                                    if $row[1] != $order
                                                        skip
                                                    else
                                                $row );
                    
                            $data = list(for $z in range($orderedData.length)
                                            $updatedNumber = $orderedData[$z][2].string + "." + $z.string;
                                            list($orderedData[$z][1],$updatedNumber,$orderedData[$z][3],$orderedData[$z][4],$orderedData[$z][5],$orderedData[$z][6])
                                        );

                            for $row in $data
                                $row      
                        else    
                            skip
            );
           
            list(list(
                    0,
                    if $beginningBalance
                        $beginningRow
                    else 
                        $endingRow,
                    $concept,
                    $concept.label($row[2].role.uri).text,
                    $current,
                    $prior
                    )) +  $breakdown
            );
			
    for $rows in $data-labels
            for $rowl in $rows
list($rv-0 = $rowl[2];
dict(list('type', 's'), list('part', 0), list('value', first-value-or-none($rv-0).string)),
$rv-1 = $rowl[4];
dict(list('type', 'f'), list('part', 1), list('value', first-value-or-none($rv-1).string), list('fact', $rowl[4].xendr-object-id), list('class', list(list("parent",$test-expr = if $rowl[3].is-abstract "title" else ""; if exists($test-expr) $test-expr else none))), list('dynamic-fact', $test-expr = if $rowl[4].is-fact "true" else "false"; if exists($test-expr) $test-expr else none)),
$rv-2 = $rowl[5];
dict(list('type', 'f'), list('part', 2), list('value', first-value-or-none($rv-2).string), list('fact', $rowl[5].xendr-object-id), list('class', list(list("parent",$test-expr = if $rowl[3].is-abstract "gray-out" else ""; if exists($test-expr) $test-expr else none))), list('sign', $test-expr = if $rowl[3].name in list(ferc:NetIncreaseDecreaseInReceivablesOperatingActivities,ferc:NetIncreaseDecreaseInInventoryOperatingActivities,ferc:NetIncreaseDecreaseInAllowancesInventoryOperatingActivities,ferc:NetIncreaseDecreaseInOtherRegulatoryAssetsOperatingActivities,ferc:GrossAdditionsToUtilityPlantLessNuclearFuelInvestingActivities,ferc:GrossAdditionsToNuclearFuelInvestingActivities,ferc:GrossAdditionsToCommonUtilityPlantInvestingActivities,ferc:GrossAdditionsToNonutilityPlantInvestingActivities,ferc:AllowanceForOtherFundsUsedDuringConstructionInvestingActivities,ferc:OtherConstructionAndAcquisitionOfPlantInvestmentActivities,ferc:CashOutflowsForPlant,ferc:AcquisitionOfOtherNoncurrentAssets,ferc:InvestmentsInAndAdvancesToAssociatedAndSubsidiaryCompanies,ferc:PurchaseOfInvestmentSecurities,ferc:LoansMadeOrPurchased,ferc:NetIncreaseDecreaseInReceivablesInvestingActivities,ferc:NetIncreaseDecreaseInInventoryInvestingActivities,ferc:PaymentsForRetirementOfLongTermDebtFinancingActivities,ferc:PaymentsForRetirementOfPreferredStockFinancingActivities,ferc:PaymentsForRetirementOfCommonStockFinancingActivities,ferc:NetDecreaseInShortTermDebt, ferc:OtherRetirementsOfBalancesImpactingCashFlowsFromFinancingActivities,ferc:DescriptionOfOtherRetirementsImpactingCashFlowsFromFinancingActivities,ferc:OtherConstructionAndAcquisitionOfPlantInvestmentActivitiesDescription,ferc:DividendsOnPreferredStock,ferc:DividendsOnCommonStock) "-" else none; if exists($test-expr) $test-expr else none)),
$rv-3 = $rowl[6];
dict(list('type', 'f'), list('part', 3), list('value', first-value-or-none($rv-3).string), list('fact', $rowl[6].xendr-object-id), list('class', list(list("parent",$test-expr = if $rowl[3].is-abstract "gray-out" else ""; if exists($test-expr) $test-expr else none))), list('sign', $test-expr = if $rowl[3].name in list(ferc:NetIncreaseDecreaseInReceivablesOperatingActivities,ferc:NetIncreaseDecreaseInInventoryOperatingActivities,ferc:NetIncreaseDecreaseInAllowancesInventoryOperatingActivities,ferc:NetIncreaseDecreaseInOtherRegulatoryAssetsOperatingActivities,ferc:GrossAdditionsToUtilityPlantLessNuclearFuelInvestingActivities,ferc:GrossAdditionsToNuclearFuelInvestingActivities,ferc:GrossAdditionsToCommonUtilityPlantInvestingActivities,ferc:GrossAdditionsToNonutilityPlantInvestingActivities,ferc:AllowanceForOtherFundsUsedDuringConstructionInvestingActivities,ferc:OtherConstructionAndAcquisitionOfPlantInvestmentActivities,ferc:CashOutflowsForPlant,ferc:AcquisitionOfOtherNoncurrentAssets,ferc:InvestmentsInAndAdvancesToAssociatedAndSubsidiaryCompanies,ferc:PurchaseOfInvestmentSecurities,ferc:LoansMadeOrPurchased,ferc:NetIncreaseDecreaseInReceivablesInvestingActivities,ferc:NetIncreaseDecreaseInInventoryInvestingActivities,ferc:PaymentsForRetirementOfLongTermDebtFinancingActivities,ferc:PaymentsForRetirementOfPreferredStockFinancingActivities,ferc:PaymentsForRetirementOfCommonStockFinancingActivities,ferc:NetDecreaseInShortTermDebt, ferc:DescriptionOfOtherRetirementsImpactingCashFlowsFromFinancingActivities,ferc:OtherConstructionAndAcquisitionOfPlantInvestmentActivitiesDescription,ferc:OtherRetirementsOfBalancesImpactingCashFlowsFromFinancingActivities,ferc:DividendsOnPreferredStock,ferc:DividendsOnCommonStock) "-" else none; if exists($test-expr) $test-expr else none)),
$rv-4 = $rowl[3].name.local-name;
dict(list('type', 's'), list('part', 4), list('value', first-value-or-none($rv-4).string))).to-json

output rule-17
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 119
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 131
    // /Users/campbellpryde/Documents/GitHub/ferc-renderer/RenderingTemplates/source/Form1/Form 1 - 120 - Statement of Cash Flows.html - 138

$headings = filter (taxonomy().concept(ferc:ScheduleStatementOfCashFlowsAbstract).references("http://ferc.gov/form/2020-01-01/roles/reference/columnDetails")) where ($item.part-by-name(ferc-part:Schedule).part-value == "120 - Schedule - Statement of Cash Flows") 

                            $headings = list(for $ref in $headings 
                            list($ref.part-by-name(ferc-part:Column).part-value, $ref.part-by-name(ferc-part:ColumnName).part-value))

                            $heading_dict = dict(for $row in $headings
						            list("("+$row[1]+")",$row[2])
						    );
                            for $row in $heading_dict.keys.sort
list($rv-0 = $heading_dict[$row];
dict(list('type', 's'), list('part', 0), list('value', first-value-or-none($rv-0).string)),
$rv-1 = $row;
dict(list('type', 's'), list('part', 1), list('value', first-value-or-none($rv-1).string))).to-json